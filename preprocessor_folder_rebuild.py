# This script reads the CSV file generated by main.go and outputs the folder structure information
# Baby step version - just reads and displays the CSV data

import csv
import os
import sys
import json

def read_and_display_csv(csv_file, output_dir):
    """
    Read the CSV file and display the folder structure information
    """
    print(f"Reading CSV file: {csv_file}")
    print(f"Output directory: {output_dir}")
    print("="*50)
    
    # Check if CSV file exists
    if not os.path.exists(csv_file):
        print(f"ERROR: CSV file {csv_file} does not exist!")
        return
    
    # Read and display CSV contents
    file_count = 0
    folder_structure = {}
    
    with open(csv_file, 'r') as file:
        reader = csv.DictReader(file)
        headers = reader.fieldnames
        
        print(f"CSV Headers: {headers}")
        
        if 'source_path' not in headers or 'target_path' not in headers:
            print("ERROR: Required headers 'source_path' and 'target_path' not found in CSV file.")
            return
        
        print("\nFile mappings:")
        print("-" * 50)
        
        for row in reader:
            file_count += 1
            source_path = row['source_path']
            target_path = row['target_path']
            
            # Extract filename from source path
            filename = os.path.basename(source_path)
            
            # Build folder structure map
            if target_path not in folder_structure:
                folder_structure[target_path] = []
            folder_structure[target_path].append(filename)
            
            print(f"File {file_count}:")
            print(f"  Source: {source_path}")
            print(f"  Target folder: {target_path}")
            print(f"  Filename: {filename}")
            print(f"  Full target path: {target_path}/{filename}" if target_path != "." else f"  Full target path: {filename}")
            print()
    
    print("="*50)
    print(f"SUMMARY:")
    print(f"Total files processed: {file_count}")
    print(f"Folder structure to be created:")
    print("-" * 30)
    
    for folder, files in folder_structure.items():
        if folder == ".":
            print(f"Root directory: {len(files)} files")
            for f in files:
                print(f"  - {f}")
        else:
            print(f"{folder}/: {len(files)} files")
            for f in files:
                print(f"  - {f}")
        print()
    
    # Write summary to output directory
    write_summary_to_output(output_dir, folder_structure, file_count)

def write_summary_to_output(output_dir, folder_structure, file_count):
    """
    Write a summary file to the output directory
    """
    try:
        # Create output directory if it doesn't exist
        os.makedirs(output_dir, exist_ok=True)
        
        summary_file = os.path.join(output_dir, "folder_structure_summary.txt")
        
        with open(summary_file, 'w') as f:
            f.write("FOLDER STRUCTURE ANALYSIS\n")
            f.write("=" * 50 + "\n")
            f.write(f"Total files processed: {file_count}\n\n")
            f.write("Folder structure to be created:\n")
            f.write("-" * 30 + "\n")
            
            for folder, files in folder_structure.items():
                if folder == ".":
                    f.write(f"Root directory: {len(files)} files\n")
                    for file in files:
                        f.write(f"  - {file}\n")
                else:
                    f.write(f"{folder}/: {len(files)} files\n")
                    for file in files:
                        f.write(f"  - {file}\n")
                f.write("\n")
        
        print(f"Summary written to: {summary_file}")
        
    except Exception as e:
        print(f"ERROR writing summary file: {e}")

def main():
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <csv_file> <output_dir>")
        print("Example: python3 preprocessor_folder_rebuild.py /input/file_paths.csv /output")
        sys.exit(1)

    csv_file = sys.argv[1]
    output_dir = sys.argv[2]
    
    print("PREPROCESSOR FOLDER REBUILD - BABY STEP VERSION")
    print("=" * 60)
    
    read_and_display_csv(csv_file, output_dir)
    
    print("=" * 60)
    print("COMPLETED: CSV analysis finished successfully!")

if __name__ == "__main__":
    main()